Here are the assignments you should work on:

1. Select a benchmark program (e.g., go.ss). Let us denote your chosen program with p.

- selected the program pc.ss just because it seemed to be simple enough.

2. Select 1 basic block, denoted with bb, from p, such that bb contains at least 15 instructions. 
A help on the delimitation of basic blocks can be found on here.

Selected the following block: 
Instruction nr: 6       
start address: 0x00400228      
end address: 0x004002c8      
block size: 20

It contains the following instructions:
  400228:       43 00 00 00     addiu $5,$6,2	ALU
  40022c:       02 00 05 06 
  400230:       46 00 00 00     mult $5,$8	MUL
  400234:       00 00 08 05 
  400238:       4a 00 00 00     mfhi $3		none
  40023c:       00 03 00 00 
  400240:       4c 00 00 00     mflo $2		none
  400244:       00 02 00 00 
  400248:       43 00 00 00     addiu $6,$6,1	ALU
  6
  40024c:       01 00 06 06 
  400250:       57 00 00 00     srl $2,$3,0x0	ALU
  400254:       00 02 03 00 
  400258:       42 00 00 00     addu $3,$0,$0	ALU
  3
  40025c:       00 03 00 00 
  400260:       59 00 00 00     sra $2,$2,0x6	ALU
  400264:       06 02 02 00 
  400268:       59 00 00 00     sra $4,$5,0x1f	ALU
  40026c:       1f 04 05 00 
  400270:       45 00 00 00     subu $2,$2,$4	ALU
  400274:       00 02 04 02 
  400278:       55 00 00 00     sll $4,$2,0x5	ALU
  40027c:       05 04 02 00 
  400280:       45 00 00 00     subu $4,$4,$2	ALU
  400284:       00 04 02 04 
  400288:       55 00 00 00     sll $4,$4,0x2	ALU
  40028c:       02 04 04 00 
  400290:       42 00 00 00     addu $4,$4,$2	ALU
  400294:       00 04 02 04 
  400298:       55 00 00 00     sll $4,$4,0x3	ALU
  4
  40029c:       03 04 04 00 
  4002a0:       45 00 00 00     subu $5,$5,$4	ALU
  5
  4002a4:       00 05 04 05 
  4002a8:       34 00 00 00     sw $5,0($7)	BAU
  4002ac:       00 00 05 07 
  4002b0:       43 00 00 00     addiu $7,$7,4	ALU
  7
  4002b4:       04 00 07 07 
  4002b8:       5c 00 00 00     slti $2,$6,1000	ALU
  2
  4002bc:       e8 03 02 06 
  4002c0:       06 00 00 00     bne $2,$0,400228 <main+0x38>	ALU
  4002c4:       d8 ff 00 02 
  4002c8:       42 00 00 00     addu $6,$0,$0	ALU
  6
  
  
Now we need to identify all the Read-After-Write dependencies, as we assume that the preprocessing can eliminate the 
WAR and WAW dependencies. These are:

400228:       43 00 00 00     addiu $5,$6,2   -- Places result in $5   
400230:       46 00 00 00     mult $5,$8      -- Reads and writes to $5

400238:       4a 00 00 00     mfhi $3         -- Writes to $3
400250:       57 00 00 00     srl $2,$3,0x0   -- Reads from $3

400250:       57 00 00 00     srl $2,$3,0x0   -- Writes to $2
400260:       59 00 00 00     sra $2,$2,0x6   -- Reads from $2

400230:       46 00 00 00     mult $5,$8      -- Writes to $5
400268:       59 00 00 00     sra $4,$5,0x1f  -- Reads from $5

400260:       59 00 00 00     sra $2,$2,0x6   -- Writes to $2
400268:       59 00 00 00     sra $4,$5,0x1f  -- Writes to $4
400270:       45 00 00 00     subu $2,$2,$4   -- Reads from $2 and $4

400270:       45 00 00 00     subu $2,$2,$4   -- Writes to $2
400278:       55 00 00 00     sll $4,$2,0x5   -- Reads from $2

400270:       45 00 00 00     subu $2,$2,$4   -- Writes to $2
400278:       55 00 00 00     sll $4,$2,0x5   -- Writes to $4
400280:       45 00 00 00     subu $4,$4,$2   - Reads from $2 and $4

400280:       45 00 00 00     subu $4,$4,$2   -- Writes to $4
400288:       55 00 00 00     sll $4,$4,0x2   -- Reads from $4

400270:       45 00 00 00     subu $2,$2,$4   -- Writes to $2
400288:       55 00 00 00     sll $4,$4,0x2   -- Writes to $4
400290:       42 00 00 00     addu $4,$4,$2   -- Reads from $2 and $4

400290:       42 00 00 00     addu $4,$4,$2   -- Writes to $4
400298:       55 00 00 00     sll $4,$4,0x3   -- Reads from $4

400230:       46 00 00 00     mult $5,$8      -- Writes to $5
400298:       55 00 00 00     sll $4,$4,0x3   -- Writes to $4
4002a0:       45 00 00 00     subu $5,$5,$4   -- Reads from $4 and $5

4002a0:       45 00 00 00     subu $5,$5,$4   -- Writes to $5
4002a8:       34 00 00 00     sw $5,0($7)     -- Reads from $5 (into $7 + offset 0)

4002a8:       34 00 00 00     sw $5,0($7)     -- Writes to $7
4002b0:       43 00 00 00     addiu $7,$7,4   -- Reads from $7

400248:       43 00 00 00     addiu $6,$6,1   -- Writes to $6
4002b8:       5c 00 00 00     slti $2,$6,1000 -- Reads from $6



3. Define the architecture of the VLIW processor V by choosing the following numbers of units.
the number of ALUs, denoted with alu_no
the number of MULs, denoted with mul_no
the number of FPUs, denoted with fpu_no
the number of BAUs, denoted with bau_no

4. Pack the instructions of bb into VLIW instructions, such that the data dependencies and resource constraints are satisfied.

5. Explore the trade-off between cost (the more units you add to the VLIW, the higher the cost) and performance (the more units you add, the higher the chance that the basic block will run faster).


2 1 1 1
ALU cost:               2 x 2.000000 = 4.000000
MUL cost:               1 x 16.000000 = 16.000000
FPU cost:               1 x 32.000000 = 32.000000
Bus access cost:        1 x 100.000000 = 100.000000
Total hardware cost:    152.000000
Performance:            15 cycles
Cost-performance ratio: 2280.000000


